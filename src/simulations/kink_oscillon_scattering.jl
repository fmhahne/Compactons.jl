export kink_oscillon_scattering, kink_oscillon_scattering_energies

function getenergies(u, t, integrator)
    œÜ = @views u[end√∑2+1:end]
    ‚àÇ‚ÇúœÜ = @views u[begin:end√∑2]

    N = length(œÜ)
    model, dx = integrator.p

    N‚ÇÅ = N √∑ 2
    N‚ÇÇ = N √∑ 2 + round(Int, œÄ / dx)

    E‚ÇÅ = dx * sum(ùíØ(‚àÇ‚ÇúœÜ[i], (œÜ[i+1] - œÜ[i-1]) / (2dx)) + model.V(œÜ[i]) for i ‚àà 2:N‚ÇÅ)
    E‚ÇÇ = dx * sum(ùíØ(‚àÇ‚ÇúœÜ[i], (œÜ[i+1] - œÜ[i-1]) / (2dx)) + model.V(œÜ[i]) for i ‚àà N‚ÇÅ+1:N‚ÇÇ) - œÄ / 2
    E‚ÇÉ = dx * sum(ùíØ(‚àÇ‚ÇúœÜ[i], (œÜ[i+1] - œÜ[i-1]) / (2dx)) + model.V(œÜ[i]) for i ‚àà N‚ÇÇ+1:N-1)

    return [E‚ÇÅ; E‚ÇÇ; E‚ÇÉ]
end

function Œ±‚Çó(V; v‚ÇÄ=0.0)
    if V ‚â• 0
        (-1 + V * (2 + v‚ÇÄ)) / 2
    else
        (1 - V * (2 + v‚ÇÄ)) / 2
    end
end

function Œ±‚ÇÄ(V; v‚ÇÄ=0.0)
    if V ‚â• 0
        V
    else
        1 - V
    end
end

function Œ±·µ§(V; v‚ÇÄ=0.0)
    if V ‚â• 0
        (1 + V * (2 + v‚ÇÄ)) / 2
    else
        (3 - V * (2 + v‚ÇÄ)) / 2
    end
end

function ab(Œ±, V; v‚ÇÄ=0.0)
    Vc = 1 / (2 + v‚ÇÄ)

    A = (1, 1)
    B = (-1, 0)
    C = (1, 0)
    D = (-1, 1)
    E = (1, -1)
    F = (-1, 2)

    if abs(V) == Vc
        if Œ± ‚â§ Œ±‚ÇÄ(V; v‚ÇÄ)
            V > 0 ? B : D
        else
            V > 0 ? C : E
        end
    elseif abs(V) < Vc
        if Œ± ‚â§ Œ±‚ÇÄ(V; v‚ÇÄ)
            V > 0 ? B : D
        elseif Œ± ‚â§ Œ±·µ§(V; v‚ÇÄ)
            V > 0 ? C : E
        else
            V > 0 ? D : F
        end
    else
        if Œ± ‚â§ Œ±‚Çó(V; v‚ÇÄ)
            V > 0 ? A : C
        elseif Œ± ‚â§ Œ±‚ÇÄ(V; v‚ÇÄ)
            V > 0 ? B : D
        else
            V > 0 ? C : E
        end
    end
end

function x_R(Œ±, V; l=1.0, v‚ÇÄ=0.0)
    a, b = ab(Œ±, V; v‚ÇÄ)
    l * Œ≥(V) / (1 + a * v‚ÇÄ * V) * ((1 - V^2) * (1 + v‚ÇÄ * b) + Œ± * (V + v‚ÇÄ * a))
end

function kink_oscillon_scattering(l, V, Œ±, v‚ÇÄ; dx=1e-3, sampling=10)
    tsave = 0.0:(dx*sampling):10.0

    x = -tsave[end]:dx:tsave[end]
    xsave = x[begin:sampling:end]

    Œ∑‚ÇÄ = kink.(0.0, x) + oscillon.(l * Œ± * Œ≥(V), x .+ x_R(Œ±, V; l, v‚ÇÄ), V; l, v‚ÇÄ)
    ‚àÇ‚ÇúŒ∑‚ÇÄ = ‚àÇ‚Çúkink.(0.0, x) + ‚àÇ‚Çúoscillon.(l * Œ± * Œ≥(V), x .+ x_R(Œ±, V; l, v‚ÇÄ), V; l, v‚ÇÄ)

    energies = SavedValues(Float64, Vector{Float64})
    cbenergies = SavingCallback(getenergies, energies; saveat=tsave)

    Œ∑, H = producedata(‚àÇ‚ÇúŒ∑‚ÇÄ, Œ∑‚ÇÄ, (quadratic, dx), tsave; callbacks=[cbenergies], dt=0.1dx, sampling)
    E = reduce(hcat, energies.saveval)

    return (x=xsave, t=tsave, Œ∑=Œ∑, H=H, E‚ÇÅ=E[1, :], E‚ÇÇ=E[2, :], E‚ÇÉ=E[3, :])
end
