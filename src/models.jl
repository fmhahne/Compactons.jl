struct Model
    V::Function
    Vโฒ::Function
end

signumgordon = Model(ฯ -> abs(ฯ), ฯ -> sign(ฯ))

quadratic = Model(ฮท -> mod(ฮท, 2) - mod(ฮท, 2)^2 / 2, ฮท -> sign(mod(ฮท, 2)) - mod(ฮท, 2))

toy = Model(ฮท -> abs(mod(ฮท - 1, 2) - 1), ฮท -> sign(mod(ฮท - 1, 2) - sign(mod(ฮท - 1, 2))))

klein_gordon = Model(ฯ -> ฯ^2 / 2, ฯ -> ฯ)

function tanh_gordon(k)
    if k == 0
        return klein_gordon
    end
    return Model(
        ฯ -> exp(-k) * ฯ^2 / 2 + log(cosh(k * ฯ)) / k, ฯ -> exp(-k) * ฯ + tanh(k * ฯ)
    )
end

function generalizedmodel(k)
    return Model(
        ฮท -> (2 - k) / 2 * (1 - abs(mod(ฮท, 2) - 1)^(k + 1)),
        ฮท ->
            -(2 - k) / 2 *
            (k + 1) *
            abs(mod(ฮท, 2) - 1)^k *
            sign(mod(ฮท, 2) - 1) *
            sign(mod(ฮท, 2)),
    )
end

function fieldeq!(โโโฯ, โโฯ, ฯ, (model, dx), t)
    N = length(ฯ)

    โโโฯ[1] = 0
    @tturbo for i in 2:(N - 1)
        โโโฯ[i] = (ฯ[i + 1] + ฯ[i - 1] - 2ฯ[i]) / dx^2 - model.Vโฒ(ฯ[i])
    end
    โโโฯ[N] = 0

    return nothing
end

๐ฏ(โโฯ, โโฯ) = (โโฯ^2 + โโฯ^2) / 2

function gethamiltonian(u, t, integrator)
    ฯ = @views u[(end รท 2 + 1):end]
    โโฯ = @views u[begin:(end รท 2)]

    N = length(ฯ)
    model, dx = integrator.p
    save_idxs = integrator.opts.save_idxs .- N

    H = zero(ฯ)
    for i in intersect(2:(N - 1), save_idxs)
        @inbounds H[i] = ๐ฏ(โโฯ[i], (ฯ[i + 1] - ฯ[i - 1]) / (2dx)) + model.V(ฯ[i])
    end

    return H[save_idxs]
end

function getenergy(u, t, integrator)
    ฯ = @views u[(end รท 2 + 1):end]
    โโฯ = @views u[begin:(end รท 2)]

    N = length(ฯ)
    model, dx = integrator.p

    return dx *
           sum(๐ฏ(โโฯ[i], (ฯ[i + 1] - ฯ[i - 1]) / (2dx)) + model.V(ฯ[i]) for i in 2:(N - 1))
end
